<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="initial-scale=1,user-scalable=no,maximum-scale=1,width=device-width">
        <meta name="mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <link rel="stylesheet" href="css/leaflet.css"><link rel="stylesheet" href="css/L.Control.Locate.min.css">
        <link rel="stylesheet" href="css/qgis2web.css"><link rel="stylesheet" href="css/fontawesome-all.min.css">
        <link rel="stylesheet" href="css/leaflet-search.css">
        <link rel="stylesheet" href="css/filter.css">
<link rel="stylesheet" href="css/nouislider.min.css">
        <style>
        html, body, #map {
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
        }
        </style>
        <title>RELACIÓN DE ORGANIZACIONES Y UNIDADES PRODUCTIVAS DE DERIVADOS LÁCTEOS - LA LIBERTAD</title>
    </head>
    <body>
        <div id="map">
        </div>
        <script src="js/qgis2web_expressions.js"></script>
        <script src="js/leaflet.js"></script><script src="js/L.Control.Locate.min.js"></script>
        <script src="js/leaflet.rotatedMarker.js"></script>
        <script src="js/leaflet.pattern.js"></script>
        <script src="js/leaflet-hash.js"></script>
        <script src="js/Autolinker.min.js"></script>
        <script src="js/rbush.min.js"></script>
        <script src="js/labelgun.min.js"></script>
        <script src="js/labels.js"></script>
        <script src="js/leaflet-search.js"></script>
        <script src="js/tailDT.js"></script>
<script src="js/nouislider.min.js"></script>
<script src="js/wNumb.js"></script>
        <script src="data/Limiteprovincial_2.js"></script>
        <script src="data/Limitedepartamental_3.js"></script>
        <script src="data/derivados_lacteos_4.js"></script>
        <script>
        var highlightLayer;
        function highlightFeature(e) {
            highlightLayer = e.target;

            if (e.target.feature.geometry.type === 'LineString') {
              highlightLayer.setStyle({
                color: '#ffff00',
              });
            } else {
              highlightLayer.setStyle({
                fillColor: '#ffff00',
                fillOpacity: 1
              });
            }
            highlightLayer.openPopup();
        }
        var map = L.map('map', {
            zoomControl:true, maxZoom:28, minZoom:1
        })
        var hash = new L.Hash(map);
        map.attributionControl.setPrefix('<a href="https://github.com/tomchadwin/qgis2web" target="_blank">qgis2web</a> &middot; <a href="https://leafletjs.com" title="A JS library for interactive maps">Leaflet</a> &middot; <a href="https://qgis.org">QGIS</a>');
        var autolinker = new Autolinker({truncate: {length: 30, location: 'smart'}});
        L.control.locate({locateOptions: {maxZoom: 19}}).addTo(map);
        var bounds_group = new L.featureGroup([]);
        function setBounds() {
            if (bounds_group.getLayers().length) {
                map.fitBounds(bounds_group.getBounds());
            }
        }
        map.createPane('pane_GoogleSatellite_0');
        map.getPane('pane_GoogleSatellite_0').style.zIndex = 400;
        var layer_GoogleSatellite_0 = L.tileLayer('https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
            pane: 'pane_GoogleSatellite_0',
            opacity: 1.0,
            attribution: '<a href="https://www.google.at/permissions/geoguidelines/attr-guide.html">Map data ©2015 Google</a>',
            minZoom: 1,
            maxZoom: 28,
            minNativeZoom: 0,
            maxNativeZoom: 20
        });
        layer_GoogleSatellite_0;
        map.addLayer(layer_GoogleSatellite_0);
        map.createPane('pane_OSMStandard_1');
        map.getPane('pane_OSMStandard_1').style.zIndex = 401;
        var layer_OSMStandard_1 = L.tileLayer('http://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            pane: 'pane_OSMStandard_1',
            opacity: 1.0,
            attribution: '<a href="https://www.openstreetmap.org/copyright">© OpenStreetMap contributors, CC-BY-SA</a>',
            minZoom: 1,
            maxZoom: 28,
            minNativeZoom: 0,
            maxNativeZoom: 19
        });
        layer_OSMStandard_1;
        map.addLayer(layer_OSMStandard_1);
        function pop_Limiteprovincial_2(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (i in e.target._eventParents) {
                        e.target._eventParents[i].resetStyle(e.target);
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['fid'] !== null ? autolinker.link(feature.properties['fid'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['NOMB_PRO'] !== null ? autolinker.link(feature.properties['NOMB_PRO'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['NOMBDEP'] !== null ? autolinker.link(feature.properties['NOMBDEP'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['cedepas'] !== null ? autolinker.link(feature.properties['cedepas'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['ugts'] !== null ? autolinker.link(feature.properties['ugts'].toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent, {maxHeight: 400});
        }
        function style_Limiteprovincial_2_0(feature) {
            var context = {
                feature: feature,
                variables: {}
            };
            // Start of if blocks and style check logic
            if (exp_Limiteprovincial_2rule0_eval_expression(context)) {
                  return {
                pane: 'pane_Limiteprovincial_2',
                opacity: 1,
                color: 'rgba(35,35,35,0.7)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(166,97,26,0.7)',
                interactive: false,
            };
                }
            else {
                return {
                pane: 'pane_Limiteprovincial_2',
                opacity: 1,
                color: 'rgba(35,35,35,0.7)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fillOpacity: 0,
                interactive: false,
            };
            }
        }
        map.createPane('pane_Limiteprovincial_2');
        map.getPane('pane_Limiteprovincial_2').style.zIndex = 402;
        map.getPane('pane_Limiteprovincial_2').style['mix-blend-mode'] = 'normal';
        var layer_Limiteprovincial_2 = new L.geoJson(json_Limiteprovincial_2, {
            attribution: '',
            interactive: false,
            dataVar: 'json_Limiteprovincial_2',
            layerName: 'layer_Limiteprovincial_2',
            pane: 'pane_Limiteprovincial_2',
            onEachFeature: pop_Limiteprovincial_2,
            style: style_Limiteprovincial_2_0,
        });
        bounds_group.addLayer(layer_Limiteprovincial_2);
        map.addLayer(layer_Limiteprovincial_2);
        function pop_Limitedepartamental_3(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (i in e.target._eventParents) {
                        e.target._eventParents[i].resetStyle(e.target);
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['fid'] !== null ? autolinker.link(feature.properties['fid'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2"><strong>NOMBDEP</strong><br />' + (feature.properties['NOMBDEP'] !== null ? autolinker.link(feature.properties['NOMBDEP'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['CAPITAL'] !== null ? autolinker.link(feature.properties['CAPITAL'].toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent, {maxHeight: 400});
        }

        function style_Limitedepartamental_3_0() {
            return {
                pane: 'pane_Limitedepartamental_3',
                opacity: 1,
                color: 'rgba(164,17,201,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 4.0, 
                fillOpacity: 0,
                interactive: false,
            }
        }
        map.createPane('pane_Limitedepartamental_3');
        map.getPane('pane_Limitedepartamental_3').style.zIndex = 403;
        map.getPane('pane_Limitedepartamental_3').style['mix-blend-mode'] = 'normal';
        var layer_Limitedepartamental_3 = new L.geoJson(json_Limitedepartamental_3, {
            attribution: '',
            interactive: false,
            dataVar: 'json_Limitedepartamental_3',
            layerName: 'layer_Limitedepartamental_3',
            pane: 'pane_Limitedepartamental_3',
            onEachFeature: pop_Limitedepartamental_3,
            style: style_Limitedepartamental_3_0,
        });
        bounds_group.addLayer(layer_Limitedepartamental_3);
        map.addLayer(layer_Limitedepartamental_3);
        function pop_derivados_lacteos_4(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (i in e.target._eventParents) {
                        e.target._eventParents[i].resetStyle(e.target);
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <th scope="row">Nº</th>\
                        <td>' + (feature.properties['Nº'] !== null ? autolinker.link(feature.properties['Nº'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">ORGANIZACIÓN</th>\
                        <td>' + (feature.properties['ORGANIZACIÓN'] !== null ? autolinker.link(feature.properties['ORGANIZACIÓN'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">CASERÍO</th>\
                        <td>' + (feature.properties['CASERÍO'] !== null ? autolinker.link(feature.properties['CASERÍO'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">DISTRITO</th>\
                        <td>' + (feature.properties['DISTRITO'] !== null ? autolinker.link(feature.properties['DISTRITO'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">PROVINCIA</th>\
                        <td>' + (feature.properties['PROVINCIA'] !== null ? autolinker.link(feature.properties['PROVINCIA'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">Capacidad de planta (L/batch)</th>\
                        <td>' + (feature.properties['Capacidad de planta (L/batch)'] !== null ? autolinker.link(feature.properties['Capacidad de planta (L/batch)'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">N° de proveedores</th>\
                        <td>' + (feature.properties['N° de proveedores'] !== null ? autolinker.link(feature.properties['N° de proveedores'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">N° de proveedoras</th>\
                        <td>' + (feature.properties['N° de proveedoras'] !== null ? autolinker.link(feature.properties['N° de proveedoras'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2"><strong>N° total de vacas</strong><br />' + (feature.properties['N° total de vacas'] !== null ? autolinker.link(feature.properties['N° total de vacas'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">Productos</th>\
                        <td>' + (feature.properties['Productos'] !== null ? autolinker.link(feature.properties['Productos'].toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent, {maxHeight: 400});
        }

        function style_derivados_lacteos_4_0() {
            return {
                pane: 'pane_derivados_lacteos_4',
        rotationAngle: 0.0,
        rotationOrigin: 'center center',
        icon: L.icon({
            iconUrl: 'markers/queso1.svg',
            iconSize: [19.0, 19.0]
        }),
                interactive: true,
            }
        }
        map.createPane('pane_derivados_lacteos_4');
        map.getPane('pane_derivados_lacteos_4').style.zIndex = 404;
        map.getPane('pane_derivados_lacteos_4').style['mix-blend-mode'] = 'normal';
        var layer_derivados_lacteos_4 = new L.geoJson(json_derivados_lacteos_4, {
            attribution: '',
            interactive: true,
            dataVar: 'json_derivados_lacteos_4',
            layerName: 'layer_derivados_lacteos_4',
            pane: 'pane_derivados_lacteos_4',
            onEachFeature: pop_derivados_lacteos_4,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.marker(latlng, style_derivados_lacteos_4_0(feature));
            },
        });
        bounds_group.addLayer(layer_derivados_lacteos_4);
        map.addLayer(layer_derivados_lacteos_4);
            var title = new L.Control();
            title.onAdd = function (map) {
                this._div = L.DomUtil.create('div', 'info');
                this.update();
                return this._div;
            };
            title.update = function () {
                this._div.innerHTML = '<h2 style="color: green; background-color: sky blue; border: 2px solid blue; padding: 10px;">RELACIÓN DE ORGANIZACIONES Y UNIDADES PRODUCTIVAS DE DERIVADOS LÁCTEOS - LA LIBERTAD</h2>';
            };
            title.addTo(map);
        var baseMaps = {};
        L.control.layers(baseMaps,{'<img src="legend/derivados_lacteos_4.png" /> derivados_lacteos': layer_derivados_lacteos_4,'<img src="legend/Limitedepartamental_3.png" /> Limite departamental': layer_Limitedepartamental_3,'Limite provincial<br /><table><tr><td style="text-align: center;"><img src="legend/Limiteprovincial_2_Provinciasconindustria0.png" /></td><td>Provincias con industria</td></tr><tr><td style="text-align: center;"><img src="legend/Limiteprovincial_2_Provinciassinindustria1.png" /></td><td>Provincias sin industria</td></tr></table>': layer_Limiteprovincial_2,"OSM Standard": layer_OSMStandard_1,"Google Satellite": layer_GoogleSatellite_0,},{collapsed:false}).addTo(map);
        setBounds();
        var i = 0;
        layer_Limiteprovincial_2.eachLayer(function(layer) {
            var context = {
                feature: layer.feature,
                variables: {}
            };
            layer.bindTooltip((layer.feature.properties['NOMB_PRO'] !== null?String('<div style="color: #000000; font-size: 7pt; font-family: \'Algerian\', sans-serif;">' + layer.feature.properties['NOMB_PRO']) + '</div>':''), {permanent: true, offset: [-0, -16], className: 'css_Limiteprovincial_2'});
            labels.push(layer);
            totalMarkers += 1;
              layer.added = true;
              addLabel(layer, i);
              i++;
        });
        map.addControl(new L.Control.Search({
            layer: layer_derivados_lacteos_4,
            initial: false,
            hideMarkerOnCollapse: true,
            propertyName: 'CASERÍO'}));
        document.getElementsByClassName('search-button')[0].className +=
         ' fa fa-binoculars';
        var mapDiv = document.getElementById('map');
        var row = document.createElement('div');
        row.className="row";
        row.id="all";
        row.style.height = "100%";
        var col1 = document.createElement('div');
        col1.className="col9";
        col1.id = "mapWindow";
        col1.style.height = "99%";
        col1.style.width = "80%";
        col1.style.display = "inline-block";
        var col2 = document.createElement('div');
        col2.className="col3";
        col2.id = "menu";
        col2.style.display = "inline-block";
        mapDiv.parentNode.insertBefore(row, mapDiv);
        document.getElementById("all").appendChild(col1);
        document.getElementById("all").appendChild(col2);
        col1.appendChild(mapDiv)
        var Filters = {"Capacidad de planta (L/batch)": "int","N° total de vacas": "int","PROVINCIA": "str","DISTRITO": "str"};
        function filterFunc() {
          map.eachLayer(function(lyr){
          if ("options" in lyr && "dataVar" in lyr["options"]){
            features = this[lyr["options"]["dataVar"]].features.slice(0);
            try{
              for (key in Filters){
                keyS = key.replace(/[^a-zA-Z0-9_]/g, "")
                if (Filters[key] == "str" || Filters[key] == "bool"){
                  var selection = [];
                  var options = document.getElementById("sel_" + keyS).options
                  for (var i=0; i < options.length; i++) {
                    if (options[i].selected) selection.push(options[i].value);
                  }
                    try{
                      if (key in features[0].properties){
                        for (i = features.length - 1;
                          i >= 0; --i){
                          if (selection.indexOf(
                          features[i].properties[key])<0
                          && selection.length>0) {
                          features.splice(i,1);
                          }
                        }
                      }
                    } catch(err){
                  }
                }
                if (Filters[key] == "int"){
                  sliderVals =  document.getElementById(
                    "div_" + keyS).noUiSlider.get();
                  try{
                    if (key in features[0].properties){
                    for (i = features.length - 1; i >= 0; --i){
                      if (parseInt(features[i].properties[key])
                          < sliderVals[0]
                          || parseInt(features[i].properties[key])
                          > sliderVals[1]){
                            features.splice(i,1);
                          }
                        }
                      }
                    } catch(err){
                    }
                  }
                if (Filters[key] == "real"){
                  sliderVals =  document.getElementById(
                    "div_" + keyS).noUiSlider.get();
                  try{
                    if (key in features[0].properties){
                    for (i = features.length - 1; i >= 0; --i){
                      if (features[i].properties[key]
                          < sliderVals[0]
                          || features[i].properties[key]
                          > sliderVals[1]){
                            features.splice(i,1);
                          }
                        }
                      }
                    } catch(err){
                    }
                  }
                if (Filters[key] == "date"
                  || Filters[key] == "datetime"
                  || Filters[key] == "time"){
                  try{
                    if (key in features[0].properties){
                      HTMLkey = key.replace(/[&\/\\#,+()$~%.'":*?<>{} ]/g, '');
                      startdate = document.getElementById("dat_" +
                        HTMLkey + "_date1").value.replace(" ", "T");
                      enddate = document.getElementById("dat_" +
                        HTMLkey + "_date2").value.replace(" ", "T");
                      for (i = features.length - 1; i >= 0; --i){
                        if (features[i].properties[key] < startdate
                          || features[i].properties[key] > enddate){
                          features.splice(i,1);
                        }
                      }
                    }
                  } catch(err){
                  }
                }
              }
            } catch(err){
            }
          this[lyr["options"]["layerName"]].clearLayers();
          this[lyr["options"]["layerName"]].addData(features);
        var i = 0;
        layer_Limiteprovincial_2.eachLayer(function(layer) {
            var context = {
                feature: layer.feature,
                variables: {}
            };
            layer.bindTooltip((layer.feature.properties['NOMB_PRO'] !== null?String('<div style="color: #000000; font-size: 7pt; font-family: \'Algerian\', sans-serif;">' + layer.feature.properties['NOMB_PRO']) + '</div>':''), {permanent: true, offset: [-0, -16], className: 'css_Limiteprovincial_2'});
            labels.push(layer);
            totalMarkers += 1;
              layer.added = true;
              addLabel(layer, i);
              i++;
        });
          }
          })
        }
            document.getElementById("menu").appendChild(
                document.createElement("div"));
            var div_CapacidaddeplantaLbatch = document.createElement("div");
            div_CapacidaddeplantaLbatch.id = "div_CapacidaddeplantaLbatch";
            div_CapacidaddeplantaLbatch.className = "slider";
            document.getElementById("menu").appendChild(div_CapacidaddeplantaLbatch);
            var lab_CapacidaddeplantaLbatch = document.createElement('div');
            lab_CapacidaddeplantaLbatch.innerHTML  = 'Capacidad de planta (L/batch): <span id="val_CapacidaddeplantaLbatch"></span>';
            lab_CapacidaddeplantaLbatch.className = 'filterlabel';
            document.getElementById("menu").appendChild(lab_CapacidaddeplantaLbatch);
            var reset_CapacidaddeplantaLbatch = document.createElement('div');
            reset_CapacidaddeplantaLbatch.innerHTML = 'clear filter';
            reset_CapacidaddeplantaLbatch.className = 'filterlabel';
            lab_CapacidaddeplantaLbatch.className = 'filterlabel';
            reset_CapacidaddeplantaLbatch.onclick = function() {
                sel_CapacidaddeplantaLbatch.noUiSlider.reset();
            };
            document.getElementById("menu").appendChild(reset_CapacidaddeplantaLbatch);
            var sel_CapacidaddeplantaLbatch = document.getElementById('div_CapacidaddeplantaLbatch');
            noUiSlider.create(sel_CapacidaddeplantaLbatch, {
                connect: true,
                start: [250, 3000],
                step: 1,
                format: wNumb({
                    decimals: 0,
                    }),
                range: {
                min: 250,
                max: 3000
                }
            });
            sel_CapacidaddeplantaLbatch.noUiSlider.on('update', function (values) {
            filterVals =[];
            for (value in values){
            filterVals.push(parseInt(value))
            }
            val_CapacidaddeplantaLbatch = document.getElementById('val_CapacidaddeplantaLbatch');
            val_CapacidaddeplantaLbatch.innerHTML = values.join(' - ');
                filterFunc()
            });
            document.getElementById("menu").appendChild(
                document.createElement("div"));
            var div_Ntotaldevacas = document.createElement("div");
            div_Ntotaldevacas.id = "div_Ntotaldevacas";
            div_Ntotaldevacas.className = "slider";
            document.getElementById("menu").appendChild(div_Ntotaldevacas);
            var lab_Ntotaldevacas = document.createElement('div');
            lab_Ntotaldevacas.innerHTML  = 'N° total de vacas: <span id="val_Ntotaldevacas"></span>';
            lab_Ntotaldevacas.className = 'filterlabel';
            document.getElementById("menu").appendChild(lab_Ntotaldevacas);
            var reset_Ntotaldevacas = document.createElement('div');
            reset_Ntotaldevacas.innerHTML = 'clear filter';
            reset_Ntotaldevacas.className = 'filterlabel';
            lab_Ntotaldevacas.className = 'filterlabel';
            reset_Ntotaldevacas.onclick = function() {
                sel_Ntotaldevacas.noUiSlider.reset();
            };
            document.getElementById("menu").appendChild(reset_Ntotaldevacas);
            var sel_Ntotaldevacas = document.getElementById('div_Ntotaldevacas');
            noUiSlider.create(sel_Ntotaldevacas, {
                connect: true,
                start: [22, 584],
                step: 1,
                format: wNumb({
                    decimals: 0,
                    }),
                range: {
                min: 22,
                max: 584
                }
            });
            sel_Ntotaldevacas.noUiSlider.on('update', function (values) {
            filterVals =[];
            for (value in values){
            filterVals.push(parseInt(value))
            }
            val_Ntotaldevacas = document.getElementById('val_Ntotaldevacas');
            val_Ntotaldevacas.innerHTML = values.join(' - ');
                filterFunc()
            });
            document.getElementById("menu").appendChild(
                document.createElement("div"));
            var div_PROVINCIA = document.createElement('div');
            div_PROVINCIA.id = "div_PROVINCIA";
            div_PROVINCIA.className= "filterselect";
            document.getElementById("menu").appendChild(div_PROVINCIA);
            sel_PROVINCIA = document.createElement('select');
            sel_PROVINCIA.multiple = true;
            sel_PROVINCIA.size = 3;
            sel_PROVINCIA.id = "sel_PROVINCIA";
            var PROVINCIA_options_str = "<option value='' unselected></option>";
            sel_PROVINCIA.onchange = function(){filterFunc()};
            PROVINCIA_options_str  += '<option value="Otuzco">Otuzco</option>';
            PROVINCIA_options_str  += '<option value="Santiago de Chuco">Santiago de Chuco</option>';
            PROVINCIA_options_str  += '<option value="Sánchez Carrión">Sánchez Carrión</option>';
            sel_PROVINCIA.innerHTML = PROVINCIA_options_str;
            div_PROVINCIA.appendChild(sel_PROVINCIA);
            var lab_PROVINCIA = document.createElement('div');
            lab_PROVINCIA.innerHTML = 'PROVINCIA';
            lab_PROVINCIA.className = 'filterlabel';
            div_PROVINCIA.appendChild(lab_PROVINCIA);
            var reset_PROVINCIA = document.createElement('div');
            reset_PROVINCIA.innerHTML = 'clear filter';
            reset_PROVINCIA.className = 'filterlabel';
            reset_PROVINCIA.onclick = function() {
                var options = document.getElementById("sel_PROVINCIA").options;
                for (var i=0; i < options.length; i++) {
                    options[i].selected = false;
                }
                filterFunc();
            };
            div_PROVINCIA.appendChild(reset_PROVINCIA);
            document.getElementById("menu").appendChild(
                document.createElement("div"));
            var div_DISTRITO = document.createElement('div');
            div_DISTRITO.id = "div_DISTRITO";
            div_DISTRITO.className= "filterselect";
            document.getElementById("menu").appendChild(div_DISTRITO);
            sel_DISTRITO = document.createElement('select');
            sel_DISTRITO.multiple = true;
            sel_DISTRITO.size = 7;
            sel_DISTRITO.id = "sel_DISTRITO";
            var DISTRITO_options_str = "<option value='' unselected></option>";
            sel_DISTRITO.onchange = function(){filterFunc()};
            DISTRITO_options_str  += '<option value="Agallpampa">Agallpampa</option>';
            DISTRITO_options_str  += '<option value="Cachicadán">Cachicadán</option>';
            DISTRITO_options_str  += '<option value="Curgos">Curgos</option>';
            DISTRITO_options_str  += '<option value="Huamachuco">Huamachuco</option>';
            DISTRITO_options_str  += '<option value="Marcabal">Marcabal</option>';
            DISTRITO_options_str  += '<option value="Quiruvilca">Quiruvilca</option>';
            DISTRITO_options_str  += '<option value="Salpo">Salpo</option>';
            sel_DISTRITO.innerHTML = DISTRITO_options_str;
            div_DISTRITO.appendChild(sel_DISTRITO);
            var lab_DISTRITO = document.createElement('div');
            lab_DISTRITO.innerHTML = 'DISTRITO';
            lab_DISTRITO.className = 'filterlabel';
            div_DISTRITO.appendChild(lab_DISTRITO);
            var reset_DISTRITO = document.createElement('div');
            reset_DISTRITO.innerHTML = 'clear filter';
            reset_DISTRITO.className = 'filterlabel';
            reset_DISTRITO.onclick = function() {
                var options = document.getElementById("sel_DISTRITO").options;
                for (var i=0; i < options.length; i++) {
                    options[i].selected = false;
                }
                filterFunc();
            };
            div_DISTRITO.appendChild(reset_DISTRITO);
        resetLabels([layer_Limiteprovincial_2,layer_derivados_lacteos_4]);
        map.on("zoomend", function(){
            resetLabels([layer_Limiteprovincial_2,layer_derivados_lacteos_4]);
        });
        map.on("layeradd", function(){
            resetLabels([layer_Limiteprovincial_2,layer_derivados_lacteos_4]);
        });
        map.on("layerremove", function(){
            resetLabels([layer_Limiteprovincial_2,layer_derivados_lacteos_4]);
        });
        </script>
    </body>
</html>
